// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  password   String
  admin      Boolean
  loads      Boolean
  finances   Boolean
  billing    Boolean
  contacts   Boolean
  accounts   Account[]
  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime  @updatedAt @db.Timestamp(0)
}

//manejo de sesion
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

//--- --- 

//Módulo de loads
model Load {
  id              String    @id @default(cuid())
  load            String    @unique
  loadType        String
  orderDate       DateTime?
  collectionDate  DateTime?
  shippingDetails String?
  recollection    String?
  proBol          String?
  originCity      String
  originState     String
  originCountry   String
  destinyCity     String
  destinyState    String
  destinyCountry  String
  invoice         String?
  shipmentInvoice DateTime?
  salePrice       Float?
  profit          Float?
  Fees            fees[]
  Contact         Contact?  @relation(fields: [contactId], references: [id])
  contactId       String?
  created_at      DateTime  @default(now()) @db.Timestamp(0)
  updated_at      DateTime  @updatedAt @db.Timestamp(0)
}

model fees {
  id         String   @id @default(cuid())
  Load       Load?    @relation(fields: [loadId], references: [id], onDelete: Cascade)
  loadId     String?
  cost       Float
  Contact    Contact? @relation(fields: [contactId], references: [id])
  contactId  String?
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt @db.Timestamp(0)
}

//--- --- 

//Módulo de contactos
model Contact {
  id             String    @id @default(cuid())
  type           String
  name           String
  rfc            String
  email          String
  AddressContact Address[]
  Loads          Load[]
  Fees           fees[]
  created_at     DateTime  @default(now()) @db.Timestamp(0)
  updated_at     DateTime  @updatedAt @db.Timestamp(0)
}

model Address {
  id         String   @id @default(cuid())
  address    String
  codePostal String
  city       String
  state      String
  country    String
  Contact    Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId  String?
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt @db.Timestamp(0)
}
